// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	entity "avito_tech/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// HouseStorage is an autogenerated mock type for the HouseStorage type
type HouseStorage struct {
	mock.Mock
}

// CreateH provides a mock function with given fields: _a0
func (_m *HouseStorage) CreateH(_a0 entity.House) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateH")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.House) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.House) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(entity.House) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFlats provides a mock function with given fields: idHouse, role
func (_m *HouseStorage) GetAllFlats(idHouse int64, role string) ([]entity.Flat, error) {
	ret := _m.Called(idHouse, role)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFlats")
	}

	var r0 []entity.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) ([]entity.Flat, error)); ok {
		return rf(idHouse, role)
	}
	if rf, ok := ret.Get(0).(func(int64, string) []entity.Flat); ok {
		r0 = rf(idHouse, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(idHouse, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: sub
func (_m *HouseStorage) Subscribe(sub entity.Subscription) error {
	ret := _m.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Subscription) error); ok {
		r0 = rf(sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHouseStorage creates a new instance of HouseStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHouseStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *HouseStorage {
	mock := &HouseStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
