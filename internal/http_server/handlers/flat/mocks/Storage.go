// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	entity "avito_tech/internal/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateF provides a mock function with given fields: _a0
func (_m *Storage) CreateF(_a0 entity.Flat) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateF")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Flat) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.Flat) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(entity.Flat) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, idMod
func (_m *Storage) Update(_a0 entity.Flat, idMod uuid.UUID) error {
	ret := _m.Called(_a0, idMod)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Flat, uuid.UUID) error); ok {
		r0 = rf(_a0, idMod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
