// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	entity "avito_tech/internal/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user, hashPassword
func (_m *Storage) CreateUser(user entity.User, hashPassword string) (uuid.UUID, error) {
	ret := _m.Called(user, hashPassword)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User, string) (uuid.UUID, error)); ok {
		return rf(user, hashPassword)
	}
	if rf, ok := ret.Get(0).(func(entity.User, string) uuid.UUID); ok {
		r0 = rf(user, hashPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.User, string) error); ok {
		r1 = rf(user, hashPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
